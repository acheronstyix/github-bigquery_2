/* This file was generated by SableCC (http://www.sablecc.org/). */

package com.abstratt.mdd.frontend.textuml.grammar.node;

import com.abstratt.mdd.frontend.textuml.grammar.analysis.*;

@SuppressWarnings("nls")
public final class ALoadDecl extends PLoadDecl
{
    private TLoad _load_;
    private TUri _uri_;
    private TSemicolon _semicolon_;

    public ALoadDecl()
    {
        // Constructor
    }

    public ALoadDecl(
        @SuppressWarnings("hiding") TLoad _load_,
        @SuppressWarnings("hiding") TUri _uri_,
        @SuppressWarnings("hiding") TSemicolon _semicolon_)
    {
        // Constructor
        setLoad(_load_);

        setUri(_uri_);

        setSemicolon(_semicolon_);

    }

    @Override
    public Object clone()
    {
        return new ALoadDecl(
            cloneNode(this._load_),
            cloneNode(this._uri_),
            cloneNode(this._semicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALoadDecl(this);
    }

    public TLoad getLoad()
    {
        return this._load_;
    }

    public void setLoad(TLoad node)
    {
        if(this._load_ != null)
        {
            this._load_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._load_ = node;
    }

    public TUri getUri()
    {
        return this._uri_;
    }

    public void setUri(TUri node)
    {
        if(this._uri_ != null)
        {
            this._uri_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._uri_ = node;
    }

    public TSemicolon getSemicolon()
    {
        return this._semicolon_;
    }

    public void setSemicolon(TSemicolon node)
    {
        if(this._semicolon_ != null)
        {
            this._semicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._semicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._load_)
            + toString(this._uri_)
            + toString(this._semicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._load_ == child)
        {
            this._load_ = null;
            return;
        }

        if(this._uri_ == child)
        {
            this._uri_ = null;
            return;
        }

        if(this._semicolon_ == child)
        {
            this._semicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._load_ == oldChild)
        {
            setLoad((TLoad) newChild);
            return;
        }

        if(this._uri_ == oldChild)
        {
            setUri((TUri) newChild);
            return;
        }

        if(this._semicolon_ == oldChild)
        {
            setSemicolon((TSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
